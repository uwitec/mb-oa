<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>无标题页</title>
    <!--[if IE]><script type="text/javascript" src="excanvas.js"></script><![endif]-->
    <style type="text/css">
        *
        {
            margin: 0;
            padding: 0;
        }
        html, body
        {
            width: 100%;
            height: 100%;
        }
        #CanvasDiv
        {
            width: 100%;
            height: 100%;
        }
        #myCanvas
        {
            background-color: #EEE;
        }
        image
        {
            margin:20px;
            border: 1px solid #333;
            display:block;
        }
    </style>
    <script type="text/javascript">

        var sampleData = {
            name: '某某流程图',
            nodes: [
			{ ID: '1', name: 'name1', type: 'start', position: { x: 11, y: 11} },
			{ ID: '2', name: 'name2', type: 'handle', position: { x: 305, y: 450} },
			{ ID: '3', name: 'name3', type: 'handle', position: { x: 35, y: 670} },
			{ ID: '4', name: 'name4', type: 'XORSplit', position: { x: 311, y: 111} },
			{ ID: '5', name: 'name5', type: 'handle', position: { x: 600, y: 330} },
			{ ID: '6', name: 'name6', type: 'handle', position: { x: 110, y: 37} },
			{ ID: '7', name: 'name7', type: 'finish', position: { x: 66, y: 88} }
		],
            Lines: [
			{ from: '1', to: '2', middlePoint: { x: 11, y: 11} },
			{ from: '2', to: '3', middlePoint: { x: 11, y: 11} },
			{ from: '2', to: '4', middlePoint: { x: 11, y: 11} },
			{ from: '3', to: '4', middlePoint: { x: 11, y: 11} },
			{ from: '5', to: '6', middlePoint: { x: 11, y: 11} },
			{ from: '5', to: '7', middlePoint: { x: 11, y: 11} },
            { from: '4', to: '5', middlePoint: { x: 11, y: 11} }
		]
        };


        var imgHandle = new Image();
        imgHandle.src = "handle.png";
        imgHandle.alt = "imgHandle";

        var imgXOR = new Image();
        imgXOR.src = "split.png";
        imgXOR.alt = "imgXOR";

        var imgStart = new Image();
        imgStart.src = "start.png";
        imgStart.alt = "imgStart";

        var imgFinish = new Image();
        imgFinish.src = "stop.png";
        imgFinish.alt = "imgFinish";

        var transXY = { x: 20, y: 20 };

        var ctx;
        function fullcanvas() {
            ctx = document.getElementById('myCanvas').getContext('2d');
            ctx.canvas.width = ctx.canvas.parentNode.scrollWidth;
            ctx.canvas.height = ctx.canvas.parentNode.scrollHeight;
            tran();
            ctx.canvas.onmousedown = canvasMouseDownHandler;
            ctx.canvas.onmouseup = canvasMouseUpHandler;

            redrawAll();
        }

        function redrawAll() {
            ctx.clearRect(-transXY.x, -transXY.y, ctx.canvas.scrollWidth, ctx.canvas.scrollHeight);

            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(100, 0);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(0, 50);
            ctx.stroke();


            for (var n in sampleData.Lines) {
                drawLine(sampleData.Lines[n]);
            }

            for (var n in sampleData.nodes) {
                drawNode(sampleData.nodes[n]);
            }
        }

        function drawText(text, x, y) {
            //ctx.fillText(text,x,y);
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.save();
            ctx.translate(transXY.x, ctx.canvas.height - transXY.y);
            ctx.fillText(text, x, -y + 10);
            ctx.restore();
            ctx.setTransform(1, 0, 0, -1, transXY.x, ctx.canvas.height - transXY.y);
        }

        /*
        * 画一条折线,终点带箭头
        */
        function drawLine(l) {
            var start = {}, end = {}, n;
            for (n in sampleData.nodes) {
                if (sampleData.nodes[n].ID == l.from) {
                    start = sampleData.nodes[n].position
                }
                if (sampleData.nodes[n].ID == l.to) {
                    end = sampleData.nodes[n].position
                }
            }

            ctx.beginPath();

            var eee = {}, sss = {};
            var dis = distance(start, end);
            sss.x = end.x + (start.x - end.x) * (dis - 20) / dis;
            sss.y = end.y + (start.y - end.y) * (dis - 20) / dis;
            eee.x = start.x + (end.x - start.x) * (dis - 20) / dis;
            eee.y = start.y + (end.y - start.y) * (dis - 20) / dis;
            ctx.moveTo(sss.x, sss.y);
            ctx.lineTo(eee.x, eee.y);
            ctx.stroke();

            drawArrow(sss, eee);
            
        }

        function drawArrow(start, end) {
            ctx.save();

            var dis = distance(start, end);
            ctx.translate(start.x + (end.x - start.x) * (dis - 12) / dis, start.y + (end.y - start.y) * (dis - 12) / dis);

            var angle = Math.atan((end.y - start.y) / (end.x - start.x));
            ctx.rotate(end.x < start.x ? Math.PI + angle : angle);

            ctx.fillStyle = "rgba(0, 0, 0, 1)";
            ctx.lineJoin = 'miter'; //'round','bevel','miter'
            ctx.beginPath();
            ctx.moveTo(0, 5);
            ctx.lineTo(4, 0);
            ctx.lineTo(0, -5);
            ctx.lineTo(13, 0);
            
            ctx.fill();

            ctx.restore();
        }

        function drawNode(n) {
            var img = null;
            switch (n.type) {
                case 'start':
                    img = imgStart;
                    break;
                case 'handle':
                    img = imgHandle;
                    break;
                case 'XORSplit':
                    img = imgXOR;
                    break;
                case 'finish':
                    img = imgFinish;
                    break;
                default:
                    break;
            }
            ctx.drawImage(img, n.position.x - 12, n.position.y - 12);  //drawImage(image, x, y, width, height)
            drawText(n.name, n.position.x - 12, n.position.y - 12);
        }

        function tran() {
            ctx.setTransform(1, 0, 0, -1, transXY.x, ctx.canvas.height - transXY.y);

        }

        var selected = null;
        function canvasMouseDownHandler(event) {
            selected = null;
            for (var n in sampleData.nodes) {
                if (distance(sampleData.nodes[n].position, { x: event.x - transXY.x, y: this.height - transXY.y - event.y }) < 16) {
                    selected = n;
                    this.onmousemove = selected ? canvasMouseMoveHandler : null;
                    return;
                }
            }
        }

        function canvasMouseMoveHandler(event) {
            sampleData.nodes[selected].position = { x: event.x - 10, y: this.height - transXY.y - event.y };
            redrawAll();
        }



        function canvasMouseUpHandler(event) {
            this.onmousemove = null;
        }

        function distance(p1, p2) {
            return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
        }

    </script>
</head>
<body onload="fullcanvas()">
    <div id="CanvasDiv">
        <canvas id="myCanvas">您的浏览器不支持 HTML5 Canvas。</canvas>
    </div>
</body>
</html>
