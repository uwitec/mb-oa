@{
    Layout = null;
}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>苏迈克斯协同办公系统</title>
    <!--通用代码块开始-->
    <link href="@Url.Content("~/Content/ExtJS/resources/css/ext-all.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Content/ExtJS/bootstrap.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/javascript/common.js")" type="text/javascript"></script>
    <script type="text/javascript">
        //        Ext.require("*");
    </script>
    <!--通用代码块完成-->
    <style type="text/css">
        body
        {
            font-size: 11px;
        }
        .MBmenu li
        {
            /*background: url(@Url.Content("~/Content/images/menuItem.gif")) no-repeat 0px 0px;
            padding: 3px 6px 3px 30px;
            */
            margin:2px;
            /*font-weight: bolder;*/
            display: block;
            border:solid 1px #dfe8f6;
            border-left: solid 8px #AACCEE;
            padding: 6px ;
        }
        .MBmenuItemEnter
        {
            background-color :#dfe8f6;
        }
        .MBmenu li a
        {
            display: block;
            width: 100%;
            text-decoration: none;
            color: black;
        }
    </style>
    <!--将涉及视图引擎变量的JS脚本写在下面代码块里-->
    <script type="text/javascript">
        var UserID = "@BuizApp.Models.LoginModel.getUserName(Html.ViewContext.HttpContext.User.Identity.Name)";
        var MenuJson = @Html.Raw(@TempData["MenuJson"].ToString());
    </script>
    <!--以下代码块与视图引擎无关-->
    <script type="text/javascript">
        //        if (Ext.BLANK_IMAGE_URL.substr(0, 5) != 'data:') {
        //            Ext.BLANK_IMAGE_URL = 'lib/extjs/resources/images/default/s.gif';
        //        }
        Ext.onReady(function () {
            //Ext.Msg.alert('Hi', 'Hello World Example')

            var north = new Ext.container.Container({
                region: "north",
                margins: '0 0 5 0',
                height: 24,
                bodyPadding: 15,
                layout: 'hbox',
                style: {
                    'background-color': '#dfe8f6',
                    'text-align': 'right'
                },
                items: [
                    { xtype: 'label', flex: 1, text: '苏 迈 克 斯 协 同 办 公 系 统', style: 'text-align:left; padding:2px; font-size:22; font-weight:bolder; color:#225588; font-family: 华文行楷;' },
                    { xtype: 'label', text: '当前用户：' + UserID + '', margin: '2 0 0 0' },
                    { xtype: 'button', text: '修改密码', margin: '0 0 0 20', handler: function () { alert('修改密码') } },
                    { xtype: 'button', text: '退出系统', margin: '0 0 0 20', handler: function () { window.location = '/login'; } }
                ]
            });

            var west = new Ext.Panel({
                region: 'west',
                //xtype: 'container',  // 写在配置对象里要描述xtype,直接创建组件不需要，已经在组件类型里了
                layout: 'accordion',
                split: true,
                collapsible: true,
                //collapseMode: 'mini',
                title: '系统菜单',
                width: 160,
                frame:true,
                minSize: 120,
                defaults: {
                    border: false
                },
                margin: 0,
                padding: 0,
                items: MenuJson
            });

            // 如何将配置项分段定义，再连接起来？--为什么要分段定义？没有必要这样

            var viewport = new Ext.Viewport({
                layout: "border",
                padding: 5,
                defaults: {
                //bodyStyle: 'padding:5px;'
            },
            items: [
                north, west
                , {
                    xtype: 'container',
                    region: 'south',
                    height: 0,
                    //html: 'South',
                    margins: '0 0 0 0',
                    bodyPadding: 0,
                    padding: 0
                }
                , {
                    region: 'center',
                    id: 'mainTabPanel',
                    xtype: 'tabpanel',
                    frame: true,
                    enableTabScroll: true,
                    activeTab: 0,
                    //html: '<iframe src="http://localhost/ext-4.0-beta2/index.html"  id="MainArea" name="MainArea" width="100%" height="100%" frameborder="0" ></iframe>',
                    items: [{
                        id: "myDesk",
                        title: '我的桌面',
                        html: '<iframe src="http://localhost/ext-4.0-beta2/examples/portal/portal.html"  id="MainArea" name="MainArea" width="100%" height="100%" frameborder="0" ></iframe>'
                    }
                    ],
                    margins: 0,
                    bodyPadding: 0
                }/*, {
                    region: 'east',
                    title: '操作说明',
                    split: true,
                    //collapseMode: 'mini',
                    collapsible: true,
                    width: 160,
                    html: 'East',
                    margins: 0,
                    bodyPadding: 5
                }*/]
        });

        Ext.select('.MBmenu a').each(function (s, w, index) { //s:Element,w:Composite
            s.on("click", function (e) {
                var url = e.getTarget().href;
                //debugger;
                e.preventDefault(); //这样才能阻止链接，return false;不行，参考 http://yiminghe.javaeye.com/blog/368860
                addTab(url, e.getTarget().innerText || e.getTarget().text, url);
            }
               );
        });

        Ext.select('.MBmenu li').each(function (s, w, index) {
            s.on('mouseenter', function (e, t) {
                //debugger;
                t.className = "MBmenuItemEnter";
            });
            s.on('mouseleave', function (e, t) {
                t.className = "";
            });
        });

        //以post方式打开url,允许执行脚本
        function addTab(url, text) {
            var Id = "tab" + hashCode(url); // Ext.id([Mixed el], [String prefix])
            var mainTabPanel = Ext.getCmp('mainTabPanel');
            var tab = Ext.getCmp(Id);
            if (tab) {
                //mainTabPanel.remove(Id); // 如果该选项卡面板里已有选项卡，先将其移除
                mainTabPanel.setActiveTab(tab); //激活
            }
            else {
                tab = Ext.create('Ext.panel.Panel', {
                    id: Id, // 此id 不是html元素的ID
                    closable: true,
                    border:0,
                    title: text,
                    html: '<iframe src="' + url + '" width="100%" height="100%" frameborder="0" ></iframe>',
                    listeners: {
                        //scope: this,
                        beforedestroy: function () {
                            //debugger;
                            Common.clearIframe(this.body.dom.getElementsByTagName("iframe")[0]);
                            //Common.clearIframe(Ext.fly(ifmName).dom);
                        }
                    }
                    //html: '<iframe src="http://localhost/extjs4/index.html"  id="MainArea" name="MainArea" width="100%" height="100%" frameborder="0" ></iframe>'
                });
                mainTabPanel.add(tab);
                tab.show();
                mainTabPanel.setActiveTab(tab);
                /*tab.getEl().load({
                target: tab,
                html:"dddddddddddddddddddddd",
                //url: url,
                //contentType: 'html',
                //autoLoad: true,
                loadMask: "Loading " + url + "...",
                scripts: true,
                params: {cwid:Id},
                frame: true,
                //                    success: function () {
                //                        alert("success");
                //                        // 不应该有具体的对象名
                //                        //var x = new Init(Id);
                //                        //Ext.Msg.alert('Hi', 'Hello World Example');
                //                        //debugger;
                //                    },
                failure: function () { alert("failure"); },
                ajaxOptions: {
                callback: function (el, success, response, options) {
                alert("ajaxOptions.callback");
                //var x = new Init(Id);
                }
                }
                });*/


            }
            //tab.frame(); //TAB头特效
        }
    });

        function hashCode(str) {
            //同一URL返回不同的值
            var now = new Date();
            str = str + now.toTimeString() + now.getMilliseconds();

            var hash = 18951163698;

            for (var i = 0; i < str.length; i++) {
                hash ^= ((hash << 5) + str.charCodeAt(i) + (hash >> 2));
            }

            return (hash & 0x7FFFFFFF);
        }

        function closeCW(CWId) {
            Ext.getCmp('mainTabPanel').remove(CWId);
        }

        function closeAllTab() {
//            for (t in Ext.getCmp('mainTabPanel').items) {
//                alert(t);
//                Ext.getCmp('mainTabPanel').remove(t);
//            }
            Ext.getCmp('mainTabPanel').removeAll(true);
        }
    </script>
</head>
<body>
</body>
</html>
